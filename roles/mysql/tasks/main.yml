  - name: Configuring the  {{COMPONENT}} Repository
    ansible.builtin.copy:
      src: mysql.repo
      dest: /etc/yum.repos.d/mysql.repo

  - name: Installing {{COMPONENT}} 
    ansible.builtin.package:
     name: mysql-community-server
     state: present 



  - name: starting {{COMPONENT}}
    ansible.builtin.systemd:
      name: mysqld
      state: started
      enabled: true

  - name: Fetch the log file from the remote node
    ansible.builtin.slurp:
      src: /var/log/mysqld.log
    register: mysql_pwd_log


  - name: Grep the password and assign it to  a variable
    ansible.builtin.set_fact:
        DEFAULT_PASSWORD: "{{ mysql_pwd_log['content'] | b64decode | regex_findall('.*temporary password.*') | join (' ') | split (' ') | last }}"
    

  # - name: Reset {{COMPONENT}}  Default root password
  #   ansible.builtin.shell:  echo "ALTER USER 'root'@'localhost' IDENTIFIED BY 'RoboShop@1';" | mysql --connect-expired-password -uroot -p"{{DEFAULT_PASSWORD}}"

  - name: Printing the password
    ansible.builtin.debug:
        msg: "{{DEFAULT_PASSWORD}}"


  - name: Configuring Node name Repo
    ansible.builtin.shell: set-hostname {{COMPONENT}}-{{ENV}}
#   - name: Download and Extract mongod 
#     ansible.builtin.include_role:
#      name: common
#      tasks_from: download
# #community.mongodb.mongodb_shell module – Run commands via the MongoDB shell.
# #
#   - name: Injecting the MongoDB Catalogue schema
#     community.mongodb.mongodb_shell:
#       file: "/tmp/{{COMPONENT}}-main/{{ item }}.js"
#       idempotent: yes
#     loop:
#       - catalogue
#       - users



  # - name: Injecting the MongoDB User schema
  #   community.mongodb.mongodb_shell:
  #    file: "/tmp/{{COMPONENT}}-main/users.js"
  #    idempotent: yes
